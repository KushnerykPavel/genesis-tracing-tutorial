version: '3.8'

services:
  api:
    build:
      context: ./api
    env_file:
      - api/.env
    depends_on:
      admin-db:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    ports:
      - "8080:2121"

  consumer:
    build:
      context: ./consumer
    env_file:
      - consumer/.env
    depends_on:
      kafka-broker:
        condition: service_healthy

  integration:
    build:
        context: ./integration
    env_file:
        - integration/.env

  admin-db:
    image: postgres:16.2
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "7632:5432"
    volumes:
      - ./api/sql:/docker-entrypoint-initdb.d/
      - ./data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka-broker:
    image: confluentinc/cp-kafka
    hostname: kafka-broker
    depends_on:
      - kafka-zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'kafka-zookeeper:2181/kafka'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_AUTO_COMMIT_ENABLE: 'false'
    restart: on-failure
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 2s
      retries: 5

  kafka-zookeeper:
    image: confluentinc/cp-zookeeper
    hostname: kafka-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: on-failure
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 30s
      timeout: 10s
      retries: 5


  # infrastructure for observability

  otel-collector:
    image: otel/opentelemetry-collector:0.86.0
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./infra/otel-collector.yaml:/etc/otel-collector.yaml
    ports:
      - "4317:4317"
      - "4318:4318"
  # To eventually offload to Tempo...
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - './infra/tempo.yaml:/etc/tempo.yaml'
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"   # zipkin

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - './infra/prometheus.yaml:/etc/prometheus.yaml'
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:10.1.1
    volumes:
      - ./infra/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary
    ports:
      - "3000:3000"

